# dependency image
FROM node:14.18.1 AS DEPS

# Create and set app directory
WORKDIR /app

# Copy stuff for deps
COPY package.json yarn.lock ./

# Install deps
RUN yarn install --frozen-lockfile --network-timeout 100000

# =========
# build image
FROM node:14.18.1 AS BUILDER

WORKDIR /app

# Copy source files
COPY . .

# .babelrc is necessary for local tests but not for deployment
RUN rm .babelrc

COPY --from=DEPS /app/node_modules ./node_modules

# NextJs public variables need to be loaded in client at build time
# RUN grep '^NEXT_PUBLIC_.*$\|^POSTGRES_.*$' app/.aptible.env > .env.production

RUN yarn build && yarn install --prod --prefer-offline
# =========
# runtime image
FROM node:14.18.1 AS RUNNER

WORKDIR /app

ENV NODE_ENV production

# Copy files for runtime
COPY --from=BUILDER app/next.config.js ./
COPY --from=BUILDER app/public ./public
COPY --from=BUILDER app/.next ./.next
COPY --from=BUILDER app/node_modules ./node_modules
COPY --from=BUILDER app/package.json ./

# Expose port
EXPOSE 3000

# Start app
CMD ["yarn", "start"]

-------


# Build image and add bash for remote sessions
FROM node:14.18.1

# Create and set app directory
ENV dir=/usr/src/app
RUN mkdir -p $dir
WORKDIR $dir

# Copy source files
COPY . $dir

# Install dependencies

RUN yarn install --prod --frozen-lockfile --network-timeout 100000 && yarn add -D typescript @types/node --network-timeout 100000

# .babelrc is necessary for local tests but not for deployment
# RUN rm .babelrc

# NextJs public variables need to be loaded in client at build time, and postgres variables are needed to pre-render the html at build time
# RUN grep '^NEXT_PUBLIC_.*$\|^POSTGRES_.*$' $dir/.aptible.env > .env.production

ENV NODE_ENV production
# Build
RUN rm .babelrc && rm -r __helpers__ __mocks__ __tests__ jest.setup.ts && yarn docker-build

# Expose port
EXPOSE 3000

# Start app
CMD ["yarn", "start"]
